function [trainedClassifier, validationAccuracy] = trainClassifier(trainingData)
% [trainedClassifier, validationAccuracy] = trainClassifier(trainingData)
% returns a trained classifier and its accuracy. This code recreates the
% classification model trained in Classification Learner app. Use the
% generated code to automate training the same model with new data, or to
% learn how to programmatically train models.
%
%  Input:
%      trainingData: a table containing the same predictor and response
%       columns as imported into the app.
%
%  Output:
%      trainedClassifier: a struct containing the trained classifier. The
%       struct contains various fields with information about the trained
%       classifier.
%
%      trainedClassifier.predictFcn: a function to make predictions on new
%       data.
%
%      validationAccuracy: a double containing the accuracy in percent. In
%       the app, the History list displays this overall accuracy score for
%       each model.
%
% Use the code to train the model with new data. To retrain your
% classifier, call the function from the command line with your original
% data or new data as the input argument trainingData.
%
% For example, to retrain a classifier trained with the original data set
% T, enter:
%   [trainedClassifier, validationAccuracy] = trainClassifier(T)
%
% To make predictions with the returned 'trainedClassifier' on new data T2,
% use
%   yfit = trainedClassifier.predictFcn(T2)
%
% T2 must be a table containing at least the same predictor columns as used
% during training. For details, enter:
%   trainedClassifier.HowToPredict

% Auto-generated by MATLAB on 22-Apr-2019 20:54:39


% Extract predictors and response
% This code processes the data into the right shape for training the
% model.
inputTable = trainingData;
% Split matrices in the input table into vectors
inputTable = [inputTable(:,setdiff(inputTable.Properties.VariableNames, {'data_features'})), array2table(table2array(inputTable(:,{'data_features'})), 'VariableNames', {'data_features_1', 'data_features_2', 'data_features_3', 'data_features_4', 'data_features_5', 'data_features_6', 'data_features_7', 'data_features_8', 'data_features_9', 'data_features_10', 'data_features_11', 'data_features_12', 'data_features_13', 'data_features_14', 'data_features_15', 'data_features_16', 'data_features_17', 'data_features_18', 'data_features_19', 'data_features_20', 'data_features_21', 'data_features_22', 'data_features_23', 'data_features_24', 'data_features_25', 'data_features_26', 'data_features_27', 'data_features_28', 'data_features_29', 'data_features_30', 'data_features_31', 'data_features_32'})];

predictorNames = {'data_features_1', 'data_features_2', 'data_features_3', 'data_features_4', 'data_features_5', 'data_features_6', 'data_features_7', 'data_features_8', 'data_features_9', 'data_features_10', 'data_features_11', 'data_features_12', 'data_features_13', 'data_features_14', 'data_features_15', 'data_features_16', 'data_features_17', 'data_features_18', 'data_features_19', 'data_features_20', 'data_features_21', 'data_features_22', 'data_features_23', 'data_features_24', 'data_features_25', 'data_features_26', 'data_features_27', 'data_features_28', 'data_features_29', 'data_features_30', 'data_features_31', 'data_features_32'};
predictors = inputTable(:, predictorNames);
response = inputTable.feature_label;
isCategoricalPredictor = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];

% Train a classifier
% This code specifies all the classifier options and trains the classifier.
classificationDiscriminant = fitcdiscr(...
    predictors, ...
    response, ...
    'DiscrimType', 'linear', ...
    'Gamma', 0, ...
    'FillCoeffs', 'off', ...
    'ClassNames', {'closed'; 'down'; 'left'; 'open'; 'right'; 'up'});

% Create the result struct with predict function
splitMatricesInTableFcn = @(t) [t(:,setdiff(t.Properties.VariableNames, {'data_features'})), array2table(table2array(t(:,{'data_features'})), 'VariableNames', {'data_features_1', 'data_features_2', 'data_features_3', 'data_features_4', 'data_features_5', 'data_features_6', 'data_features_7', 'data_features_8', 'data_features_9', 'data_features_10', 'data_features_11', 'data_features_12', 'data_features_13', 'data_features_14', 'data_features_15', 'data_features_16', 'data_features_17', 'data_features_18', 'data_features_19', 'data_features_20', 'data_features_21', 'data_features_22', 'data_features_23', 'data_features_24', 'data_features_25', 'data_features_26', 'data_features_27', 'data_features_28', 'data_features_29', 'data_features_30', 'data_features_31', 'data_features_32'})];
extractPredictorsFromTableFcn = @(t) t(:, predictorNames);
predictorExtractionFcn = @(x) extractPredictorsFromTableFcn(splitMatricesInTableFcn(x));
discriminantPredictFcn = @(x) predict(classificationDiscriminant, x);
trainedClassifier.predictFcn = @(x) discriminantPredictFcn(predictorExtractionFcn(x));

% Add additional fields to the result struct
trainedClassifier.RequiredVariables = {'data_features'};
trainedClassifier.ClassificationDiscriminant = classificationDiscriminant;
trainedClassifier.About = 'This struct is a trained model exported from Classification Learner R2018b.';
trainedClassifier.HowToPredict = sprintf('To make predictions on a new table, T, use: \n  yfit = c.predictFcn(T) \nreplacing ''c'' with the name of the variable that is this struct, e.g. ''trainedModel''. \n \nThe table, T, must contain the variables returned by: \n  c.RequiredVariables \nVariable formats (e.g. matrix/vector, datatype) must match the original training data. \nAdditional variables are ignored. \n \nFor more information, see <a href="matlab:helpview(fullfile(docroot, ''stats'', ''stats.map''), ''appclassification_exportmodeltoworkspace'')">How to predict using an exported model</a>.');

% Extract predictors and response
% This code processes the data into the right shape for training the
% model.
inputTable = trainingData;
% Split matrices in the input table into vectors
inputTable = [inputTable(:,setdiff(inputTable.Properties.VariableNames, {'data_features'})), array2table(table2array(inputTable(:,{'data_features'})), 'VariableNames', {'data_features_1', 'data_features_2', 'data_features_3', 'data_features_4', 'data_features_5', 'data_features_6', 'data_features_7', 'data_features_8', 'data_features_9', 'data_features_10', 'data_features_11', 'data_features_12', 'data_features_13', 'data_features_14', 'data_features_15', 'data_features_16', 'data_features_17', 'data_features_18', 'data_features_19', 'data_features_20', 'data_features_21', 'data_features_22', 'data_features_23', 'data_features_24', 'data_features_25', 'data_features_26', 'data_features_27', 'data_features_28', 'data_features_29', 'data_features_30', 'data_features_31', 'data_features_32'})];

predictorNames = {'data_features_1', 'data_features_2', 'data_features_3', 'data_features_4', 'data_features_5', 'data_features_6', 'data_features_7', 'data_features_8', 'data_features_9', 'data_features_10', 'data_features_11', 'data_features_12', 'data_features_13', 'data_features_14', 'data_features_15', 'data_features_16', 'data_features_17', 'data_features_18', 'data_features_19', 'data_features_20', 'data_features_21', 'data_features_22', 'data_features_23', 'data_features_24', 'data_features_25', 'data_features_26', 'data_features_27', 'data_features_28', 'data_features_29', 'data_features_30', 'data_features_31', 'data_features_32'};
predictors = inputTable(:, predictorNames);
response = inputTable.feature_label;
isCategoricalPredictor = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];

% Perform cross-validation
partitionedModel = crossval(trainedClassifier.ClassificationDiscriminant, 'KFold', 5);

% Compute validation predictions
[validationPredictions, validationScores] = kfoldPredict(partitionedModel);

% Compute validation accuracy
validationAccuracy = 1 - kfoldLoss(partitionedModel, 'LossFun', 'ClassifError');
